{"version":3,"sources":["pages/other/MyAccount.js","wrappers/breadcrumb/Breadcrumb.js"],"names":["AccountUserProfile","authentication","strings","console","log","className","Header","Toggle","variant","eventKey","Collapse","Body","userid","defaultValue","username","type","useremail","UserOrders","useState","loading","setLoading","paying","setPaying","error","setError","orders","setOrders","order","setOrder","CinetPay","window","addToast","t2","useEffect","setConfig","apikey","site_id","notify_url","routes","notify_url_cinetpay","on","e","code","message","paymentInfo","lastTime","cpm_result","toast","success","location","reload","cpm_error_message","axios","get","server","then","result","data","catch","finally","style","color","striped","bordered","hover","map","totalAmount","products","forEach","productRefVar","productRef","price","salePrice","productVariation","sizeStock","amount","_id","date","currency","isPayed","onClick","info","setTimeout","setSignatureData","parseInt","document","getElementById","value","trans_id","designation","custom","cpm_phone_prefixe","getSignature","global","setModalContent","split","join","paymentStatus","createdAt","product","rowSpan","src","image","height","name","sizeName","marginTop","id","toFixed","Math","random","UserTransactions","transactions","setTransactions","display","marginBottom","margin","filter","transaction","completed","length","marginLeft","fontWeight","connect","state","multilanguage","pathname","content","to","process","headerTop","defaultActiveKey","Breadcrumb","separator","item","NavLink","finalItem"],"mappings":"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","file":"static/js/39.f6bdfb2b.chunk.js","sourcesContent":["import PropTypes, {string} from \"prop-types\";\r\nimport React, {Fragment, useEffect, useState} from \"react\";\r\nimport MetaTags from \"react-meta-tags\";\r\nimport {BreadcrumbsItem} from \"react-breadcrumbs-dynamic\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Table from \"react-bootstrap/Table\"\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport LayoutOne from \"../../layouts/LayoutOne\";\r\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\r\nimport {connect} from \"react-redux\";\r\nimport {multilanguage} from \"redux-multilanguage\";\r\nimport {routes} from \"../../config/routes\";\r\nimport axios from 'axios';\r\nimport {Button} from \"react-bootstrap\";\r\nimport {toast} from \"react-toastify\";\r\nimport {ToastContainer, toast as t2} from 'react-toastify';\r\n\r\nconst MyAccount = ({location, authentication, strings}) => {\r\n    const {pathname} = location;\r\n\r\n    return (\r\n        <Fragment>\r\n            <MetaTags>\r\n                <title>wendyfy | My Account</title>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Compare page of flone react minimalist eCommerce template.\"\r\n                />\r\n            </MetaTags>\r\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings['my_account']}</BreadcrumbsItem>\r\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\r\n                {strings['my_account']}\r\n            </BreadcrumbsItem>\r\n            <LayoutOne headerTop=\"visible\">\r\n                {/* breadcrumb */}\r\n                <Breadcrumb/>\r\n                <div className=\"myaccount-area pb-80 pt-100\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"ml-auto mr-auto col-lg-9\">\r\n                                <div className=\"myaccount-wrapper\">\r\n                                    <Accordion defaultActiveKey=\"0\">\r\n                                        <AccountUserProfile authentication={authentication} strings={strings}/>\r\n                                        <UserOrders strings={strings} authentication={authentication}/>\r\n                                        <UserTransactions strings={strings} authentication={authentication}/>\r\n                                    </Accordion>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </LayoutOne>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\n\r\nMyAccount.propTypes = {\r\n    location: PropTypes.object,\r\n    strings: PropTypes.object\r\n};\r\n\r\n\r\nconst AccountUserProfile = ({authentication, strings}) => {\r\n    console.log(authentication)\r\n    return <Card className=\"single-my-account mb-20\">\r\n        <Card.Header className=\"panel-heading\">\r\n            <Accordion.Toggle variant=\"link\" eventKey=\"0\">\r\n                <h3 className=\"panel-title\">\r\n                    <span>1 .</span> {strings['edit_account_information']}{\" \"}\r\n                </h3>\r\n            </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n                <div className=\"myaccount-info-wrapper\">\r\n                    <div className=\"account-info-wrapper\">\r\n                        <h4>{strings['account_information']} ({authentication.userid}) </h4>\r\n                        <h5>{strings['your_personal_details']}</h5>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                            <div className=\"billing-info\">\r\n                                <label>{strings['lr_username']}</label>\r\n                                <input defaultValue={authentication.username} type=\"text\"/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6\">\r\n                            <div className=\"billing-info\">\r\n                                {strings['lr_email']}\r\n                                <label></label>\r\n                                <input defaultValue={authentication.useremail} type=\"email\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"myaccount-info-wrapper\">\r\n                    <div className=\"account-info-wrapper\">\r\n                        <h4> {strings['change_password']} </h4>\r\n                        <h5>{strings['your_password']} </h5>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12 col-md-12\">\r\n                            <div className=\"billing-info\">\r\n                                <label>{strings['password']}</label>\r\n                                <input type=\"password\"/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-12 col-md-12\">\r\n                            <div className=\"billing-info\">\r\n                                <label>{strings['password_confirm']}</label>\r\n                                <input type=\"password\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"billing-back-btn\">\r\n                        <div className=\"billing-btn\">\r\n                            <button type=\"submit\">{strings['continue']}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Accordion.Collapse>\r\n    </Card>\r\n}\r\n\r\nconst UserOrders = ({authentication, strings}) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [paying, setPaying] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const [orders, setOrders] = useState([])\r\n    const [order, setOrder] = useState({})\r\n    let CinetPay = window.CinetPay;\r\n    let addToast = t2.error\r\n    useEffect(function () {\r\n        CinetPay.setConfig({\r\n            apikey: '8936433616017f33cc7a2b9.78720038',\r\n            site_id: 302789,\r\n            notify_url: routes.notify_url_cinetpay\r\n            // notify_url: 'https://15ac0633fc2d.ngrok.io/api/order/transactions/ipn-update',\r\n            // notify_url: 'https://wendyfy-listener.novobyte.org/cinetpay-php-sdk-master/exemple/notify/index.php',\r\n            // return_url: \"https://wendyfy-listener.novobyte.org/cinetpay-php-sdk-master/exemple/return/index.php\",\r\n            // cancel:\"http://wendyfy-listener.novobyte.org/cinetpay-php-sdk-master/exemple/cancel\",\r\n        });\r\n\r\n        CinetPay.on('error', function (e) {\r\n            addToast(strings['subs_connection_error'] + ': ' + e.code + ',' + e.message)\r\n            setPaying(false)\r\n        });\r\n        CinetPay.on('paymentPending', function (e) {\r\n\r\n        });\r\n        CinetPay.on('signatureCreated', function () {\r\n        })\r\n        CinetPay.on('paymentSuccessfull', function (paymentInfo) {\r\n            if (typeof paymentInfo.lastTime != 'undefined') {\r\n                // result_div.innerHTML = '';\r\n                if (paymentInfo.cpm_result == '00') {\r\n                    toast.success(strings['payment_completed'])\r\n                    setPaying(false)\r\n                    window.location.reload();\r\n                } else {\r\n                    addToast(strings['subs_connection_error'] + ': ' + paymentInfo.cpm_error_message)\r\n                    setPaying(false)\r\n                }\r\n            }\r\n        });\r\n\r\n        axios.get(`${routes.server}/order/user/${authentication.userid}`).then(result => {\r\n            setOrders(result.data)\r\n        }).catch(error => {\r\n            setError(true)\r\n        }).finally(e => {\r\n            setLoading(false)\r\n        })\r\n    }, [])\r\n    return <Card className=\"single-my-account mb-20\">\r\n        <ToastContainer/>\r\n        <Card.Header className=\"panel-heading\">\r\n            <Accordion.Toggle variant=\"link\" eventKey=\"2\">\r\n                <h3 className=\"panel-title\">\r\n                    <span>2 .</span> {strings['your_orders']}\r\n                </h3>\r\n            </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"2\">\r\n            <Card.Body>\r\n                <div className=\"container\">\r\n                    <div className=\"col-lg-12 col-md-12\">\r\n                        {loading && <center><p>{strings['loading']}...</p></center>}\r\n                        {error && <center><p style={{color: \"red\"}}>{strings['subs_connection_error']}...</p></center>}\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>#ID</th>\r\n                                <th>{strings['date_time']}</th>\r\n                                <th>{strings['amount']}</th>\r\n                                <th>{strings['state']}</th>\r\n                                <th>{strings['action']}</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {orders.map(order => {\r\n                                let totalAmount = 0;\r\n                                order.products.forEach(productRefVar => {\r\n                                    console.log(productRefVar)\r\n                                    totalAmount += ((productRefVar.productRef.price - productRefVar.productRef.salePrice) * productRefVar.productVariation[0].sizeStock)\r\n                                })\r\n                                order.amount = totalAmount\r\n                                return <tr>\r\n                                    <td>{strings['order']}-{order._id}</td>\r\n                                    <td>{order.date}</td>\r\n                                    <td>{order.currency} {totalAmount}</td>\r\n                                    <td>{order.isPayed ? strings['state_paid'] : strings['state_not_paid']}</td>\r\n                                    <td>{!order.isPayed && <Button variant=\"warning\" onClick={e => {\r\n                                        if (paying) {\r\n                                            return;\r\n                                        }\r\n                                        setPaying(true)\r\n                                        // alert('ok')\r\n                                        t2.info(strings['loading']);\r\n                                        setOrder(order);\r\n                                        setTimeout(function () {\r\n                                            CinetPay.setSignatureData({\r\n                                                amount: parseInt(document.getElementById('amount').value),\r\n                                                trans_id: document.getElementById('trans_id').value,\r\n                                                currency: document.getElementById('currency').value,\r\n                                                designation: document.getElementById('designation').value,\r\n                                                custom: document.getElementById('cpm_custom').value,\r\n                                                // cel_phone_num: '696076817',\r\n                                                cpm_phone_prefixe: '237'\r\n                                            });\r\n                                            CinetPay.getSignature();\r\n                                        }, 500)\r\n                                    }}\r\n                                                                   style={{color: \"white\"}}>{strings['pay_now']}</Button>}\r\n\r\n\r\n                                        <Button variant=\"dark\" onClick={e => {\r\n                                            setTimeout(function () {\r\n                                                global.setModalContent(<div >\r\n                                                    <h3>{strings['order_information']}</h3>\r\n                                                    {order._id && <div>\r\n                                                        <strong>\r\n                                                            {strings['order']}\r\n                                                        </strong>\r\n                                                        <table style={{\"width\": \"100%\"}}\r\n                                                               className=\"table table-bordered\">\r\n                                                         {/*   <tr>\r\n                                                                <td>\r\n                                                                    <strong>{strings['user']}:</strong>\r\n                                                                </td>\r\n                                                                <td>{order.name}</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n\r\n                                                                <td>\r\n                                                                    <strong>{strings['email']}:</strong>\r\n                                                                </td>\r\n                                                                <td>{order.user.email}</td>\r\n                                                            </tr>*/}\r\n                                                            <tr>\r\n                                                                <td>\r\n                                                                    <strong>{strings['ordered_on_the']}</strong>\r\n                                                                </td>\r\n                                                                <td>{\r\n                                                                    order\r\n                                                                        .date.split(\"T\").join(\" \").split(\".\")[0]\r\n                                                                }</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n\r\n                                                                <td><strong>{strings['amount']}:</strong>\r\n                                                                </td>\r\n                                                                <td>{order.amount} {\r\n                                                                    order\r\n                                                                        .currency\r\n                                                                } {(order.isPayed && order.paymentStatus && order.paymentStatus.createdAt)?<span\r\n                                                                    style={{color:\"green\"}}>{strings['paid_on_the']} {\r\n                                                                    order.paymentStatus.createdAt.split(\"T\").join(\" \").split(\".\")[0]\r\n                                                                }</span>:<span\r\n                                                                    style={{color:\"red\"}}>PAS PAY&Eacute;</span>}\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                        </table>\r\n                                                        <strong>\r\n                                                            {strings['product']}\r\n                                                        </strong>\r\n                                                        {/*\r\n                                                                                      v-for=\"product in order.products\"\r\n                                                                                      v-bind:key=\"product.productRef._id*/}\r\n                                                        {order.products.map(product => <table\r\n                                                            style={{\"width\": \"100%\"}}\r\n                                                            className=\"table table-bordered\">\r\n\r\n                                                            <tr>\r\n                                                                <td rowSpan=\"5\">\r\n                                                                    <img\r\n                                                                        src={product.productRef.image[0]}\r\n                                                                        height=\"150\"/>\r\n                                                                </td>\r\n                                                                <td>{\r\n                                                                    product\r\n                                                                        .productRef.name\r\n                                                                } (x{\r\n                                                                    product\r\n                                                                        .productVariation[0].sizeStock\r\n                                                                })\r\n                                                                </td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>\r\n                                                                    <strong>{strings['color']}: </strong>{\r\n                                                                    product\r\n                                                                        .productVariation[0].color\r\n                                                                }</td>\r\n                                                            </tr>\r\n                                                            <tr>\r\n                                                                <td>\r\n                                                                    <strong>{strings['size']}: </strong>{\r\n                                                                    product\r\n                                                                        .productVariation[0].sizeName\r\n                                                                }</td>\r\n                                                            </tr>\r\n                                                        </table>)}\r\n\r\n\r\n                                                    </div>}\r\n                                                </div>)\r\n                                            }, 500)\r\n                                        }} style={{color: \"white\",marginTop:10}}>\r\n                                            {strings['view_more']}\r\n                                        </Button>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                    </td>\r\n                                </tr>\r\n                            })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                    {order._id && <div id=\"info_paiement\">\r\n                        <input type=\"hidden\" id=\"amount\" value={order.amount.toFixed(2)}/>\r\n\r\n                        <input type=\"hidden\" id=\"currency\" value=\"XAF\"/>\r\n\r\n                        <input type=\"hidden\" id=\"trans_id\" value={order._id + \"_\" + Math.random()}/>\r\n\r\n                        <input type=\"hidden\" id=\"cpm_custom\" value={authentication.userid + \"/\" + order._id}/>\r\n\r\n                        <input type=\"hidden\" id=\"designation\"\r\n                               value={strings['payment_for_order'] + \" - #\" + order._id}/>\r\n                    </div>}\r\n                </div>\r\n            </Card.Body>\r\n        </Accordion.Collapse>\r\n    </Card>\r\n}\r\n\r\nconst UserTransactions = ({authentication, strings}) => {\r\n    const [loading, setLoading] = useState(true)\r\n    const [paying, setPaying] = useState(false)\r\n    const [error, setError] = useState(false)\r\n    const [transactions, setTransactions] = useState([])\r\n    let addToast = t2.error\r\n    useEffect(function () {\r\n        axios.get(`${routes.server}/order/transactions/${authentication.userid}`).then(result => {\r\n            setTransactions(result.data)\r\n        }).catch(error => {\r\n            setError(true)\r\n        }).finally(e => {\r\n            setLoading(false)\r\n        })\r\n    }, [])\r\n    return <Card className=\"single-my-account mb-20\">\r\n        <ToastContainer/>\r\n        <Card.Header className=\"panel-heading\">\r\n            <Accordion.Toggle variant=\"link\" eventKey=\"2\">\r\n                <h3 className=\"panel-title\">\r\n                    <span>3 .</span> {strings['your_transactions']}\r\n                </h3>\r\n            </Accordion.Toggle>\r\n        </Card.Header>\r\n        <Accordion.Collapse eventKey=\"2\">\r\n            <Card.Body>\r\n                <div className=\"container\">\r\n                    <div className=\"col-lg-12 col-md-12\">\r\n                        {loading && <center><p>{strings['loading']}...</p></center>}\r\n                        {error && <center><p style={{color: \"red\"}}>{strings['subs_connection_error']}...</p></center>}\r\n                        <div style={{display: \"flex\", marginBottom: 10}}>\r\n                            <div>\r\n                                <center><h1\r\n                                    style={{margin: 0}}>{transactions.filter(transaction => transaction.completed).length}</h1>\r\n                                    <small>{strings['completed']}</small>\r\n\r\n                                </center>\r\n                            </div>\r\n                            <div style={{marginLeft: 20}}>\r\n                                <center><h1\r\n                                    style={{margin: 0}}>{transactions.filter(transaction => !transaction.completed).length}</h1>\r\n                                    <small>{strings['failed']}</small></center>\r\n                            </div>\r\n                        </div>\r\n\r\n\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>#ID</th>\r\n                                <th>{strings['order']}</th>\r\n                                <th>{strings['date_time']}</th>\r\n                                <th>{strings['amount']}</th>\r\n                                <th>{strings['state']}</th>\r\n                            </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                            {transactions.map(transaction => {\r\n                                return <tr>\r\n                                    <td>{transaction._id}</td>\r\n                                    <td>{strings['order']}-{transaction.order._id}</td>\r\n                                    <td>{transaction.createdAt.split(\"T\").join(\" \").split(\".\")[0]}</td>\r\n                                    <td>{transaction.order.currency} {transaction.amount}</td>\r\n                                    <td style={{\r\n                                        color: transaction.completed ? \"green\" : \"red\",\r\n                                        fontWeight: \"bolder\"\r\n                                    }}>{transaction.completed ? strings['completed'] : strings['failed']}</td>\r\n                                </tr>\r\n                            })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n        </Accordion.Collapse>\r\n    </Card>\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        authentication: state.authentication\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {};\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps)(multilanguage(MyAccount));","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Breadcrumbs } from \"react-breadcrumbs-dynamic\";\r\n\r\nconst Breadcrumb = () => {\r\n  return (\r\n    <div className=\"breadcrumb-area pt-35 pb-35 bg-gray-3\">\r\n      <div className=\"container\">\r\n        <div className=\"breadcrumb-content text-center\">\r\n          <Breadcrumbs\r\n            separator={<span>/</span>}\r\n            item={NavLink}\r\n            finalItem={\"span\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n"],"sourceRoot":""}