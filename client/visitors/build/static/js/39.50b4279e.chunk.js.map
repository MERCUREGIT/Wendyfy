{"version":3,"sources":["pages/other/MyAccount.js","wrappers/breadcrumb/Breadcrumb.js"],"names":["AccountUserProfile","authentication","strings","console","log","className","Header","Toggle","variant","eventKey","Collapse","Body","userid","defaultValue","username","type","useremail","UserOrders","useState","paying","setPaying","order","setOrder","CinetPay","window","striped","bordered","hover","map","totalAmount","products","forEach","productRefVar","productRef","price","salePrice","productVariation","sizeStock","amount","_id","date","currency","isPayed","onClick","e","t2","info","setTimeout","setSignatureData","parseInt","document","getElementById","value","trans_id","designation","custom","cpm_phone_prefixe","getSignature","style","color","global","setModalContent","split","join","paymentStatus","createdAt","product","rowSpan","alt","src","image","height","name","sizeName","marginTop","id","toFixed","Math","random","UserTransactions","loading","setLoading","error","setError","transactions","setTransactions","useEffect","axios","get","routes","server","then","result","data","catch","finally","display","marginBottom","margin","filter","transaction","completed","length","marginLeft","fontWeight","connect","state","multilanguage","location","pathname","content","to","process","headerTop","defaultActiveKey","Breadcrumb","separator","item","NavLink","finalItem"],"mappings":"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","file":"static/js/39.50b4279e.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, {Fragment, useEffect, useState} from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport {BreadcrumbsItem} from \"react-breadcrumbs-dynamic\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\"\nimport Accordion from \"react-bootstrap/Accordion\";\nimport LayoutOne from \"../../layouts/LayoutOne\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\nimport {connect} from \"react-redux\";\nimport {multilanguage} from \"redux-multilanguage\";\nimport {routes} from \"../../config/routes\";\nimport axios from 'axios';\nimport {Button} from \"react-bootstrap\";\n// import {toast} from \"react-toastify\";\nimport {ToastContainer, toast as t2} from 'react-toastify';\n\nconst MyAccount = ({location, authentication, strings}) => {\n    const {pathname} = location;\n\n    return (\n        <Fragment>\n            <MetaTags>\n                <title>wendyfy | My Account</title>\n                <meta\n                    name=\"description\"\n                    content=\"Compare page of flone react minimalist eCommerce template.\"\n                />\n            </MetaTags>\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>{strings['my_account']}</BreadcrumbsItem>\n            <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\n                {strings['my_account']}\n            </BreadcrumbsItem>\n            <LayoutOne headerTop=\"visible\">\n                {/* breadcrumb */}\n                <Breadcrumb/>\n                <div className=\"myaccount-area pb-80 pt-100\">\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            <div className=\"ml-auto mr-auto col-lg-9\">\n                                <div className=\"myaccount-wrapper\">\n                                    <Accordion defaultActiveKey=\"0\">\n                                        <AccountUserProfile authentication={authentication} strings={strings}/>\n                                        <UserOrders strings={strings} authentication={authentication}/>\n                                        <UserTransactions strings={strings} authentication={authentication}/>\n                                    </Accordion>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </LayoutOne>\n        </Fragment>\n    );\n};\n\n\nMyAccount.propTypes = {\n    location: PropTypes.object,\n    strings: PropTypes.object\n};\n\n\nconst AccountUserProfile = ({authentication, strings}) => {\n    console.log(authentication)\n    return <Card className=\"single-my-account mb-20\">\n        <Card.Header className=\"panel-heading\">\n            <Accordion.Toggle variant=\"link\" eventKey=\"0\">\n                <h3 className=\"panel-title\">\n                    <span>1 .</span> {strings['edit_account_information']}{\" \"}\n                </h3>\n            </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"0\">\n            <Card.Body>\n                <div className=\"myaccount-info-wrapper\">\n                    <div className=\"account-info-wrapper\">\n                        <h4>{strings['account_information']} ({authentication.userid}) </h4>\n                        <h5>{strings['your_personal_details']}</h5>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-6 col-md-6\">\n                            <div className=\"billing-info\">\n                                <label>{strings['lr_username']}</label>\n                                <input defaultValue={authentication.username} type=\"text\"/>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-6 col-md-6\">\n                            <div className=\"billing-info\">\n                                {strings['lr_email']}\n                                <label></label>\n                                <input defaultValue={authentication.useremail} type=\"email\"/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"myaccount-info-wrapper\">\n                    <div className=\"account-info-wrapper\">\n                        <h4> {strings['change_password']} </h4>\n                        <h5>{strings['your_password']} </h5>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col-lg-12 col-md-12\">\n                            <div className=\"billing-info\">\n                                <label>{strings['password']}</label>\n                                <input type=\"password\"/>\n                            </div>\n                        </div>\n                        <div className=\"col-lg-12 col-md-12\">\n                            <div className=\"billing-info\">\n                                <label>{strings['password_confirm']}</label>\n                                <input type=\"password\"/>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"billing-back-btn\">\n                        <div className=\"billing-btn\">\n                            <button type=\"submit\">{strings['continue']}</button>\n                        </div>\n                    </div>\n                </div>\n            </Card.Body>\n        </Accordion.Collapse>\n    </Card>\n}\n\nconst UserOrders = ({authentication, strings}) => {\n    const loading= true\n    const [paying, setPaying] = useState(false)\n    const error=false\n    const orders = []\n    const [order, setOrder] = useState({})\n    let CinetPay = window.CinetPay;\n    // let addToast = t2.error\n    // useEffect(function () {\n    //     CinetPay.setConfig({\n    //         apikey: '8936433616017f33cc7a2b9.78720038',\n    //         site_id: 302789,\n    //         notify_url: routes.notify_url_cinetpay\n    //         // notify_url: 'https://15ac0633fc2d.ngrok.io/api/order/transactions/ipn-update',\n    //         // notify_url: 'https://wendyfy-listener.novobyte.org/cinetpay-php-sdk-master/exemple/notify/index.php',\n    //         // return_url: \"https://wendyfy-listener.novobyte.org/cinetpay-php-sdk-master/exemple/return/index.php\",\n    //         // cancel:\"http://wendyfy-listener.novobyte.org/cinetpay-php-sdk-master/exemple/cancel\",\n    //     });\n\n    //     CinetPay.on('error', function (e) {\n    //         addToast(strings['subs_connection_error'] + ': ' + e.code + ',' + e.message)\n    //         setPaying(false)\n    //     });\n    //     CinetPay.on('paymentPending', function (e) {\n\n    //     });\n    //     CinetPay.on('signatureCreated', function () {\n    //     })\n    //     CinetPay.on('paymentSuccessfull', function (paymentInfo) {\n    //         if (typeof paymentInfo.lastTime != 'undefined') {\n    //             // result_div.innerHTML = '';\n    //             if (paymentInfo.cpm_result === '00') {\n    //                 toast.success(strings['payment_completed'])\n    //                 setPaying(false)\n    //                 window.location.reload();\n    //             } else {\n    //                 addToast(strings['subs_connection_error'] + ': ' + paymentInfo.cpm_error_message)\n    //                 setPaying(false)\n    //             }\n    //         }\n    //     });\n\n        // axios.get(`${routes.server}/order/user/${authentication.userid}`).then(result => {\n    //         setOrders(result.data)\n    //     }).catch(error => {\n    //         setError(true)\n    //     }).finally(e => {\n    //         setLoading(false)\n    //     })\n    // }, [])\n    return <Card className=\"single-my-account mb-20\">\n        <ToastContainer/>\n        <Card.Header className=\"panel-heading\">\n            <Accordion.Toggle variant=\"link\" eventKey=\"2\">\n                <h3 className=\"panel-title\">\n                    <span>2 .</span> {strings['your_orders']}\n                </h3>\n            </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"2\">\n            <Card.Body>\n                <div className=\"container\">\n                    <div className=\"col-lg-12 col-md-12\">\n                        {loading && <center><p>{strings['loading']}...</p></center>}\n                        {error && <center><p style={{color: \"red\"}}>{strings['subs_connection_error']}...</p></center>}\n                        <Table striped bordered hover>\n                            <thead>\n                            <tr>\n                                <th>#ID</th>\n                                <th>{strings['date_time']}</th>\n                                <th>{strings['amount']}</th>\n                                <th>{strings['state']}</th>\n                                <th>{strings['action']}</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {orders.map(order => {\n                                let totalAmount = 0;\n                                order.products.forEach(productRefVar => {\n                                    console.log(productRefVar)\n                                    totalAmount += ((productRefVar.productRef.price - productRefVar.productRef.salePrice) * productRefVar.productVariation[0].sizeStock)\n                                })\n                                order.amount = totalAmount\n                                return <tr>\n                                    <td>{strings['order']}-{order._id}</td>\n                                    <td>{order.date}</td>\n                                    <td>{order.currency} {totalAmount}</td>\n                                    <td>{order.isPayed ? strings['state_paid'] : strings['state_not_paid']}</td>\n                                    <td>{!order.isPayed && <Button variant=\"warning\" onClick={e => {\n                                        if (paying) {\n                                            return;\n                                        }\n                                        setPaying(true)\n                                        // alert('ok')\n                                        t2.info(strings['loading']);\n                                        setOrder(order);\n                                        setTimeout(function () {\n                                            CinetPay.setSignatureData({\n                                                amount: parseInt(document.getElementById('amount').value),\n                                                trans_id: document.getElementById('trans_id').value,\n                                                currency: document.getElementById('currency').value,\n                                                designation: document.getElementById('designation').value,\n                                                custom: document.getElementById('cpm_custom').value,\n                                                // cel_phone_num: '696076817',\n                                                cpm_phone_prefixe: '237'\n                                            });\n                                            CinetPay.getSignature();\n                                        }, 500)\n                                    }}\n                                                                   style={{color: \"white\"}}>{strings['pay_now']}</Button>}\n\n\n                                        <Button variant=\"dark\" onClick={e => {\n                                            setTimeout(function () {\n                                                global.setModalContent(<div >\n                                                    <h3>{strings['order_information']}</h3>\n                                                    {order._id && <div>\n                                                        <strong>\n                                                            {strings['order']}\n                                                        </strong>\n                                                        <table style={{\"width\": \"100%\"}}\n                                                               className=\"table table-bordered\">\n                                                         {/*   <tr>\n                                                                <td>\n                                                                    <strong>{strings['user']}:</strong>\n                                                                </td>\n                                                                <td>{order.name}</td>\n                                                            </tr>\n                                                            <tr>\n\n                                                                <td>\n                                                                    <strong>{strings['email']}:</strong>\n                                                                </td>\n                                                                <td>{order.user.email}</td>\n                                                            </tr>*/}\n                                                            <tr>\n                                                                <td>\n                                                                    <strong>{strings['ordered_on_the']}</strong>\n                                                                </td>\n                                                                <td>{\n                                                                    order\n                                                                        .date.split(\"T\").join(\" \").split(\".\")[0]\n                                                                }</td>\n                                                            </tr>\n                                                            <tr>\n\n                                                                <td><strong>{strings['amount']}:</strong>\n                                                                </td>\n                                                                <td>{order.amount} {\n                                                                    order\n                                                                        .currency\n                                                                } {(order.isPayed && order.paymentStatus && order.paymentStatus.createdAt)?<span\n                                                                    style={{color:\"green\"}}>{strings['paid_on_the']} {\n                                                                    order.paymentStatus.createdAt.split(\"T\").join(\" \").split(\".\")[0]\n                                                                }</span>:<span\n                                                                    style={{color:\"red\"}}>PAS PAY&Eacute;</span>}\n                                                                </td>\n                                                            </tr>\n                                                        </table>\n                                                        <strong>\n                                                            {strings['product']}\n                                                        </strong>\n                                                        {/*\n                                                                                      v-for=\"product in order.products\"\n                                                                                      v-bind:key=\"product.productRef._id*/}\n                                                        {order.products.map(product => <table\n                                                            style={{\"width\": \"100%\"}}\n                                                            className=\"table table-bordered\">\n\n                                                            <tr>\n                                                                <td rowSpan=\"5\">\n                                                                    <img\n                                                                    alt=\"Product \"\n                                                                        src={product.productRef.image[0]}\n                                                                        height=\"150\"/>\n                                                                </td>\n                                                                <td>{\n                                                                    product\n                                                                        .productRef.name\n                                                                } (x{\n                                                                    product\n                                                                        .productVariation[0].sizeStock\n                                                                })\n                                                                </td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td>\n                                                                    <strong>{strings['color']}: </strong>{\n                                                                    product\n                                                                        .productVariation[0].color\n                                                                }</td>\n                                                            </tr>\n                                                            <tr>\n                                                                <td>\n                                                                    <strong>{strings['size']}: </strong>{\n                                                                    product\n                                                                        .productVariation[0].sizeName\n                                                                }</td>\n                                                            </tr>\n                                                        </table>)}\n\n\n                                                    </div>}\n                                                </div>)\n                                            }, 500)\n                                        }} style={{color: \"white\",marginTop:10}}>\n                                            {strings['view_more']}\n                                        </Button>\n\n\n\n\n\n\n\n\n\n                                    </td>\n                                </tr>\n                            })}\n                            </tbody>\n                        </Table>\n                    </div>\n                    {order._id && <div id=\"info_paiement\">\n                        <input type=\"hidden\" id=\"amount\" value={order.amount.toFixed(2)}/>\n\n                        <input type=\"hidden\" id=\"currency\" value=\"XAF\"/>\n\n                        <input type=\"hidden\" id=\"trans_id\" value={order._id + \"_\" + Math.random()}/>\n\n                        <input type=\"hidden\" id=\"cpm_custom\" value={authentication.userid + \"/\" + order._id}/>\n\n                        <input type=\"hidden\" id=\"designation\"\n                               value={strings['payment_for_order'] + \" - #\" + order._id}/>\n                    </div>}\n                </div>\n            </Card.Body>\n        </Accordion.Collapse>\n    </Card>\n}\n\nconst UserTransactions = ({authentication, strings}) => {\n    const [loading, setLoading] = useState(true)\n    // const [paying, setPaying] = useState(false)\n    const [error, setError] = useState(false)\n    const [transactions, setTransactions] = useState([])\n    // let addToast = t2.error\n    useEffect(function () {\n        axios.get(`${routes.server}/order/transactions/${authentication.userid}`).then(result => {\n            setTransactions(result.data)\n        }).catch(error => {\n            setError(true)\n        }).finally(e => {\n            setLoading(false)\n        })\n    })\n    return <Card className=\"single-my-account mb-20\">\n        <ToastContainer/>\n        <Card.Header className=\"panel-heading\">\n            <Accordion.Toggle variant=\"link\" eventKey=\"2\">\n                <h3 className=\"panel-title\">\n                    <span>3 .</span> {strings['your_transactions']}\n                </h3>\n            </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"2\">\n            <Card.Body>\n                <div className=\"container\">\n                    <div className=\"col-lg-12 col-md-12\">\n                        {loading && <center><p>{strings['loading']}...</p></center>}\n                        {error && <center><p style={{color: \"red\"}}>{strings['subs_connection_error']}...</p></center>}\n                        <div style={{display: \"flex\", marginBottom: 10}}>\n                            <div>\n                                <center><h1\n                                    style={{margin: 0}}>{transactions.filter(transaction => transaction.completed).length}</h1>\n                                    <small>{strings['completed']}</small>\n\n                                </center>\n                            </div>\n                            <div style={{marginLeft: 20}}>\n                                <center><h1\n                                    style={{margin: 0}}>{transactions.filter(transaction => !transaction.completed).length}</h1>\n                                    <small>{strings['failed']}</small></center>\n                            </div>\n                        </div>\n\n\n                        <Table striped bordered hover>\n                            <thead>\n                            <tr>\n                                <th>#ID</th>\n                                <th>{strings['order']}</th>\n                                <th>{strings['date_time']}</th>\n                                <th>{strings['amount']}</th>\n                                <th>{strings['state']}</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {transactions.map(transaction => {\n                                return <tr>\n                                    <td>{transaction._id}</td>\n                                    <td>{strings['order']}-{transaction.order._id}</td>\n                                    <td>{transaction.createdAt.split(\"T\").join(\" \").split(\".\")[0]}</td>\n                                    <td>{transaction.order.currency} {transaction.amount}</td>\n                                    <td style={{\n                                        color: transaction.completed ? \"green\" : \"red\",\n                                        fontWeight: \"bolder\"\n                                    }}>{transaction.completed ? strings['completed'] : strings['failed']}</td>\n                                </tr>\n                            })}\n                            </tbody>\n                        </Table>\n                    </div>\n                </div>\n            </Card.Body>\n        </Accordion.Collapse>\n    </Card>\n}\n\n\nconst mapStateToProps = state => {\n    return {\n        authentication: state.authentication\n    };\n};\n\n// const mapDispatchToProps = dispatch => {\n//     return {};\n// };\n\n\nexport default connect(mapStateToProps)(multilanguage(MyAccount));","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Breadcrumbs } from \"react-breadcrumbs-dynamic\";\n\nconst Breadcrumb = () => {\n  return (\n    <div className=\"breadcrumb-area pt-35 pb-35 bg-gray-3\">\n      <div className=\"container\">\n        <div className=\"breadcrumb-content text-center\">\n          <Breadcrumbs\n            separator={<span>/</span>}\n            item={NavLink}\n            finalItem={\"span\"}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Breadcrumb;\n"],"sourceRoot":""}